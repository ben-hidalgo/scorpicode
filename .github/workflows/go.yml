name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GKE_CLUSTER: test
  GKE_ZONE: us-west1-a
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GCR_HOSTNAME: ${{ secrets.GCR_HOSTNAME }}
  GOOGLE_APPLICATION_CREDENTIALS: "./gsa-key.json"

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Check out
      uses: actions/checkout@v2

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14.2
      id: go

    - name: Get Dependencies
      working-directory: ./backend
      run: |
        go get -u golang.org/x/lint/golint
        go get -v -t -d ./...

    - name: Vet
      working-directory: ./backend
      run: |
        go vet ./...
        golint -set_exit_status ./...

    - name: Unit Test
      working-directory: ./backend
      run: go test ./... -short -v

    - name: Write Checksum Tags
      run: |
        ./devops/scripts/write-tags.sh
        cat ./devops/helmchart/tags.yaml

    - name: Docker Build
      run: |
        docker images
        GO111MODULE=on go get github.com/mikefarah/yq/v3
        bash ./devops/scripts/docker-build.sh
        docker images

    - name: Install Terraform
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get install terraform

    - name: Terraform
      working-directory: ./devops/terraform/local/
      run: |
        terraform init  
        terraform apply -auto-approve

    - name: Integration Tests
      run:  |
        ./devops/scripts/integration-tests.sh dev
          
    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
    - run: gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    # TODO: branch name is not an env var??? https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions
    - name: Docker Push
      run: |
        bash ./devops/scripts/docker-push.sh master

    - name: Decrypt
      run: |
        echo $GKE_SA_KEY
        echo $GKE_SA_KEY > $GOOGLE_APPLICATION_CREDENTIALS
        cat $GOOGLE_APPLICATION_CREDENTIALS
        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
        wget https://github.com/mozilla/sops/releases/download/v3.6.0/sops_3.6.0_amd64.deb
        sudo dpkg -i sops_3.6.0_amd64.deb
        mkdir -p ./secrets/decrypted/
        sops -d ./secrets/encrypted/master.yaml > ./secrets/decrypted/master.yaml

    - name: Install Helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod +x get_helm.sh
        ./get_helm.sh
  
    - name: Helm Upgrade Master
      run: |
        ./devops/scripts/helm-upgrade.sh master
        sleep 10
        kubectl get po -n master
        kubectl wait --for=condition=ready pod -l release=scorpicode --timeout=180s -n master
        kubectl get po -n master
  
    - name: Zip Helmchart
      run: tar cvzf helmchart-${{ github.run_number }}-${{ github.sha }}.tar.gz ./devops/helmchart/

    - name: Upload Helmchart Artifact
      uses: actions/upload-artifact@v1
      with:
        name: helmchart-${{ github.run_number }}-${{ github.sha }}.tar.gz
        path: helmchart-${{ github.run_number }}-${{ github.sha }}.tar.gz
